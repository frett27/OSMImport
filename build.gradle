buildscript {
 
    repositories {
        jcenter()
    }
 
    dependencies {
        // Add dependency for build script,
        // so we can access Git from our
        // build script.
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
 
}



apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'distribution'

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
 
    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}
 
group = 'osmtools'

def defaultRelease = "0.8.0-SNAPSHOT"
def exportedVersion = System.getenv("RELEASE")
if (exportedVersion != null && !"".equals(exportedVersion.trim())) {
    defaultRelease = exportedVersion 
}
version = defaultRelease

description = """tools for handling import of osm datas into filegeodatabases, csv"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

eclipse {
	classpath { downloadSources=true }
}

sourceSets {
	main {
		groovy {
			srcDirs = ['src/main/java', 'src/main/groovy']
		}
		java { srcDirs = [] }
		resources { srcDirs = ['src/main/resources'] }
	}

	test {
		groovy {
			srcDirs = ['src/test/java', 'src/test/groovy']
		}
		java { srcDirs = [] }
	}
}

repositories {
	mavenLocal()
	maven { url "http://repo.maven.apache.org/maven2" }
	maven { url "http://repo.akka.io/snapshots" }
	maven { url "http://repo.akka.io/releases" }
	maven { url "http://jfgdb.s3-website-eu-west-1.amazonaws.com/maven2"}
}

dependencies {

	// PBF binary structures
	//compile group: 'crosby.binary', name: 'osmpbf', version:'1.3.3'
	compile files('externallibs/osmpbf-1.3.3.jar')

	// Aka dependencies
	compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version:'2.4.20'
	
	// https://mvnrepository.com/artifact/com.typesafe.akka/akka-slf4j
	compile group: 'com.typesafe.akka', name: 'akka-slf4j_2.11', version: '2.4.20'
	
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
	// compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

	// tools for metrics reporting
	compile group: 'com.yammer.metrics', name: 'metrics-core', version:'2.2.0'

	// file geodatabase dependency
	compile group: 'org.jfgdb', name: 'jfgdb', version:'0.1.4-SNAPSHOT'

	// groovy for import DSL
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.3.7'

    // ESRI Geometry api
	compile group: 'com.esri.geometry', name: 'esri-geometry-api', version:'1.2.1'

    // ESRI Geometry api
	compile group: 'net.frett27', name: 'osm-gis-avro', version:'0.1'

	// used for command line interpretation
	compile group: 'commons-cli', name: 'commons-cli', version:'1.2'

	// used by akka
	compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.1.10'

	// base 64
	compile 'commons-codec:commons-codec:1.10'

	// test dependencies
	testCompile group: 'junit', name: 'junit', version:'4.11'
	// testCompile group: 'ch.qos.logback', name:'logback-classic',version:'1.0.13'

}

task changeVersion {
    doLast {
        def vf = project.file('build/resources/main/com/osmimport/version.properties')
        if (vf.exists()) {
            def p = new Properties()
            def fi = new FileInputStream(vf)
            try {
                p.load(fi)
            } finally {
                fi.close()
            }
            p.setProperty("version",version + ".${git.head().abbreviatedId}")

            def fo = new FileOutputStream(vf)
            try {
                p.save(fo, "version file")
            } finally {
                fo.close()
            }
        }
    }
}

changeVersion.dependsOn processResources


compileJava{
    dependsOn changeVersion
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title': 'OSM Import',
		'Implementation-Version': version,
		'Main-Class': 'com.osmimport.MCLI'
	}
	baseName = project.name + '-all'
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it).matching {
				exclude 'META-INF/**.RSA'
				exclude 'META-INF/MANIFEST.MF'
			} } }
	with jar
}

configurations.all {
	resolutionStrategy { force 'com.google.protobuf:protobuf-java:2.6.0'	 }
}

distributions {
	main {
		baseName = "osmimport"
		contents {
			with (copySpec {
				from ( "$buildDir/libs" )
				{ include "*.jar" }
			}).rename { f ->
                if (f.startsWith("osmtoolsreader")) {
                    'osmimport.jar'
                } else 
                {
                    f
                }
            }

            with copySpec {
                from(".")
                { include "ChangeLog.md" }
            }

			with copySpec{
				// include the jre in the build
				def jrePath = new File(System.getProperty("java.home"))
				from { jrePath }
				into { 'jre' }
			}
			
			with copySpec {
				// include documentation in the bundle
				from { "doc" }
                into { 'doc' }
				
			}
        	with copySpec {
				// include scripts examples to distribution
				from { "scripts" }
				into { "scripts" }
			}
	       	with copySpec {
				// include scripts examples to distribution
				from { "tutorial" }
				into { "tutorial" }
			}
			
		}

	}

}

distZip.dependsOn fatJar

